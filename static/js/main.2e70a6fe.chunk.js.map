{"version":3,"sources":["lib/GaugeChart/index.js","lib/index.js","App.js","serviceWorker.js","index.js"],"names":["startAngle","Math","PI","endAngle","animateNeedleProps","GaugeChart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initChart","update","resize","arguments","length","undefined","renderChart","svg","container","append","g","doughnut","attr","pie","value","d","sort","needle","window","addEventListener","updateDimensions","width","margin","left","right","height","top","bottom","calculateRadius","outerRadius","arc","innerRadius","arcWidth","cornerRadius","padAngle","arcPadding","selectAll","remove","data","arcData","enter","style","color","drawNeedle","marginInPercent","divDimensions","node","getBoundingClientRect","divWidth","divHeight","centerGraph","_this$props","percent","needleColor","needleBaseColor","hideText","animate","_assertThisInitialize","assertThisInitialized","calculateRotation","needleRadius","centerPoint","pathStr","addText","transition","delay","ease","d3","duration","tween","percentOfPercent","progress","select","needleLength","theta","percentToRad","topPoint","cos","sin","leftPoint","rightPoint","concat","getColors","colors","colorScale","domain","nbArcsToDisplay","range","interpolate","colorArray","i","push","percentage","text","floatingNumber","textColor","maxDigits","round","pow","_this$props2","nrOfLevels","arcsLength","arcDatum","id","prevProps","_this2","some","key","react_default","a","createElement","React","Component","defaultProps","App","Fragment","Container","Row","Col","xs","lg","offset","span","lib","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e70a6fe.chunk.js","sourcesContent":["import React from 'react'\r\nimport * as d3 from 'd3'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './style.css'\r\n/*\r\nGaugeChart creates a gauge chart using D3\r\nThe chart is responsive and will have the same width as the \"container\"\r\nThe radius of the gauge depends on the width and height of the container\r\nIt will use whichever is smallest of width or height\r\nThe svg element surrounding the gauge will always be square\r\n\"container\" is the div where the chart should be placed\r\n*/\r\n\r\n//Constants\r\nconst startAngle = -Math.PI / 2 //Negative x-axis\r\nconst endAngle = Math.PI / 2 //Positive x-axis\r\n\r\n// Props that should cause an animation on update\r\nconst animateNeedleProps = ['marginInPercent', 'arcPadding', 'percent', 'nrOfLevels']\r\n\r\nclass GaugeChart extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    const { nrOfLevels, colors } = this.props\r\n    //Class variables\r\n    this.svg = {}\r\n    this.g = {}\r\n    this.width = {}\r\n    this.height = {}\r\n    this.doughnut = {}\r\n    this.needle = {}\r\n    this.data = {}\r\n    this.outerRadius = {}\r\n    this.margin = {} // = {top: 20, right: 50, bottom: 50, left: 50},\r\n    this.arc = d3.arc()\r\n    this.pie = d3.pie()\r\n\r\n    // We have to make a decision about number of arcs to display\r\n    // If arcsLength is setted, we choose arcsLength length instead of nrOfLevels\r\n    this.nbArcsToDisplay = props.arcsLength ? props.arcsLength.length : nrOfLevels\r\n\r\n    //Check if the number of colors equals the number of levels\r\n    //Otherwise make an interpolation\r\n    if (this.nbArcsToDisplay === colors.length) {\r\n      this.colorArray = colors\r\n    } else {\r\n      this.colorArray = this.getColors()\r\n    }\r\n    //The data that is used to create the arc\r\n    // Each arc could have hiw own value width arcsLength prop\r\n    this.arcData = []\r\n    for (var i = 0; i < this.nbArcsToDisplay; i++) {\r\n      var arcDatum = {\r\n        value: props.arcsLength && props.arcsLength.length > i ? props.arcsLength[i] : 1,\r\n        color: this.colorArray[i]\r\n      }\r\n      this.arcData.push(arcDatum)\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.id) {\r\n      this.container = d3.select(`#${this.props.id}`)\r\n      //Initialize chart\r\n      this.initChart()\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    //Initialize chart\r\n    // Always redraw the chart, but potentially do not animate it\r\n    const resize = !animateNeedleProps.some(key => prevProps[key] !== this.props[key])\r\n    this.initChart(true, resize)\r\n  }\r\n\r\n  initChart = (update, resize = false) => {\r\n    if (update) {\r\n      this.renderChart(resize)\r\n      return\r\n    }\r\n\r\n    this.svg = this.container.append('svg')\r\n    this.g = this.svg.append('g') //Used for margins\r\n    this.doughnut = this.g.append('g').attr('class', 'doughnut')\r\n\r\n    //Set up the pie generator\r\n    //Each arc should be of equal length (or should they?)\r\n    this.pie\r\n      .value(function(d) {\r\n        return d.value\r\n      })\r\n      //.padAngle(arcPadding)\r\n      .startAngle(startAngle)\r\n      .endAngle(endAngle)\r\n      .sort(null)\r\n    //Add the needle element\r\n    this.needle = this.g.append('g').attr('class', 'needle')\r\n    //Set up resize event listener to re-render the chart everytime the window is resized\r\n    window.addEventListener('resize', () => {\r\n      var resize = true\r\n      this.renderChart(resize)\r\n    })\r\n    this.renderChart(resize)\r\n  }\r\n\r\n  //Renders the chart, should be called every time the window is resized\r\n  renderChart = resize => {\r\n    this.updateDimensions()\r\n    //Set dimensions of svg element and translations\r\n    this.svg\r\n      .attr('width', this.width + this.margin.left + this.margin.right)\r\n      .attr('height', this.height + this.margin.top + this.margin.bottom)\r\n    this.g.attr('transform', 'translate(' + this.margin.left + ', ' + this.margin.top + ')')\r\n    //Set the radius to lesser of width or height and remove the margins\r\n    //Calculate the new radius\r\n    this.calculateRadius()\r\n    this.doughnut.attr('transform', 'translate(' + this.outerRadius + ', ' + this.outerRadius + ')')\r\n    //Setup the arc\r\n    this.arc\r\n      .outerRadius(this.outerRadius)\r\n      .innerRadius(this.outerRadius * (1 - this.props.arcWidth))\r\n      .cornerRadius(this.props.cornerRadius)\r\n      .padAngle(this.props.arcPadding)\r\n    //Remove the old stuff\r\n    this.doughnut.selectAll('.arc').remove()\r\n    this.needle.selectAll('*').remove()\r\n    this.g.selectAll('.text-group').remove()\r\n    //Draw the arc\r\n    var arcPaths = this.doughnut\r\n      .selectAll('.arc')\r\n      .data(this.pie(this.arcData))\r\n      .enter()\r\n      .append('g')\r\n      .attr('class', 'arc')\r\n    arcPaths\r\n      .append('path')\r\n      .attr('d', this.arc)\r\n      .style('fill', function(d) {\r\n        return d.data.color\r\n      })\r\n\r\n    this.drawNeedle(resize)\r\n    //Translate the needle starting point to the middle of the arc\r\n    this.needle.attr('transform', 'translate(' + this.outerRadius + ', ' + this.outerRadius + ')')\r\n  }\r\n\r\n  updateDimensions = () => {\r\n    //TODO: Fix so that the container is included in the component\r\n    const { marginInPercent } = this.props\r\n    var divDimensions = this.container.node().getBoundingClientRect(),\r\n      divWidth = divDimensions.width,\r\n      divHeight = divDimensions.height\r\n    //Set the new width and horizontal margins\r\n    this.margin.left = divWidth * marginInPercent\r\n    this.margin.right = divWidth * marginInPercent\r\n    this.width = divWidth - this.margin.left - this.margin.right\r\n\r\n    this.margin.top = divHeight * marginInPercent\r\n    this.margin.bottom = divHeight * marginInPercent\r\n    this.height = this.width / 2 - this.margin.top - this.margin.bottom\r\n    //this.height = divHeight - this.margin.top - this.margin.bottom;\r\n  }\r\n\r\n  calculateRadius = () => {\r\n    //The radius needs to be constrained by the containing div\r\n    //Since it is a half circle we are dealing with the height of the div\r\n    //Only needs to be half of the width, because the width needs to be 2 * radius\r\n    //For the whole arc to fit\r\n\r\n    //First check if it is the width or the height that is the \"limiting\" dimension\r\n    if (this.width < 2 * this.height) {\r\n      //Then the width limits the size of the chart\r\n      //Set the radius to the width - the horizontal margins\r\n      this.outerRadius = (this.width - this.margin.left - this.margin.right) / 2\r\n    } else {\r\n      this.outerRadius = this.height - this.margin.top - this.margin.bottom\r\n    }\r\n    this.centerGraph()\r\n  }\r\n\r\n  //Calculates new margins to make the graph centered\r\n  centerGraph = () => {\r\n    this.margin.left = this.width / 2 - this.outerRadius + this.margin.right\r\n    this.g.attr('transform', 'translate(' + this.margin.left + ', ' + this.margin.top + ')')\r\n  }\r\n\r\n  //If 'resize' is true then the animation does not play\r\n  drawNeedle = (resize) => {\r\n    const { percent, needleColor, needleBaseColor, hideText, animate } = this.props;\r\n    const { container, calculateRotation } = this;\r\n    var needleRadius = 15*(this.width / 500) ,   // Make the needle radius responsive\r\n        centerPoint = [0, -needleRadius/2];\r\n    //Draw the triangle\r\n    //var pathStr = `M ${leftPoint[0]} ${leftPoint[1]} L ${topPoint[0]} ${topPoint[1]} L ${rightPoint[0]} ${rightPoint[1]}`;\r\n    var pathStr = this.calculateRotation(0)\r\n    this.needle\r\n      .append('path')\r\n      .attr('d', pathStr)\r\n      .attr('fill', needleColor)\r\n    //Add a circle at the bottom of needle\r\n    this.needle\r\n      .append('circle')\r\n      .attr('cx', centerPoint[0])\r\n      .attr('cy', centerPoint[1])\r\n      .attr('r', needleRadius)\r\n      .attr('fill', needleBaseColor)\r\n    if (!hideText) {\r\n      this.addText(percent)\r\n    }\r\n    //Rotate the needle\r\n    if(!resize && animate){\r\n      this.needle.transition()\r\n      .delay(500)\r\n      .ease(d3.easeElastic)\r\n      .duration(3000)\r\n      .tween('progress', function(){\r\n        return function(percentOfPercent){\r\n          var progress = percentOfPercent * percent;\r\n          return container.select(`.needle path`).attr(\"d\", calculateRotation(progress));\r\n        }\r\n      });\r\n    }\r\n    else{\r\n      container.select(`.needle path`).attr(\"d\", calculateRotation(percent));\r\n    }\r\n  }\r\n\r\n  calculateRotation = percent => {\r\n    var needleLength = this.outerRadius * 0.55, //TODO: Maybe it should be specified as a percentage of the arc radius?\r\n      needleRadius = 15 * (this.width / 500),\r\n      theta = this.percentToRad(percent),\r\n      centerPoint = [0, -needleRadius / 2],\r\n      topPoint = [centerPoint[0] - needleLength * Math.cos(theta), centerPoint[1] - needleLength * Math.sin(theta)],\r\n      leftPoint = [\r\n        centerPoint[0] - needleRadius * Math.cos(theta - Math.PI / 2),\r\n        centerPoint[1] - needleRadius * Math.sin(theta - Math.PI / 2)\r\n      ],\r\n      rightPoint = [\r\n        centerPoint[0] - needleRadius * Math.cos(theta + Math.PI / 2),\r\n        centerPoint[1] - needleRadius * Math.sin(theta + Math.PI / 2)\r\n      ]\r\n    var pathStr = `M ${leftPoint[0]} ${leftPoint[1]} L ${topPoint[0]} ${topPoint[1]} L ${rightPoint[0]} ${\r\n      rightPoint[1]\r\n    }`\r\n    return pathStr\r\n  }\r\n\r\n  //Returns the angle (in rad) for the given 'percent' value where percent = 1 means 100% and is 180 degree angle\r\n  percentToRad = percent => {\r\n    return percent * Math.PI\r\n  }\r\n\r\n  //Depending on the number of levels in the chart\r\n  //This function returns the same number of colors\r\n  getColors = () => {\r\n    const { colors } = this.props\r\n    var colorScale = d3\r\n      .scaleLinear()\r\n      .domain([1, this.nbArcsToDisplay])\r\n      .range([colors[0], colors[colors.length - 1]]) //Use the first and the last color as range\r\n      .interpolate(d3.interpolateHsl)\r\n    var colorArray = []\r\n    for (var i = 1; i <= this.nbArcsToDisplay; i++) {\r\n      colorArray.push(colorScale(i))\r\n    }\r\n    return colorArray\r\n  }\r\n\r\n  //Adds text undeneath the graft to display which percentage is the current one\r\n  addText = percentage => {\r\n    var textPadding = 20\r\n    this.g\r\n      .append('g')\r\n      .attr('class', 'text-group')\r\n      .attr('transform', `translate(${this.outerRadius}, ${this.outerRadius / 2 + textPadding})`)\r\n      .append('text')\r\n      .text(`${this.floatingNumber(percentage)}%`)\r\n      .style('font-size', () => `${this.width / 10}px`)\r\n      .style('fill', this.props.textColor)\r\n      .attr('class', 'percent-text')\r\n  }\r\n\r\n  floatingNumber = (value, maxDigits = 2) => {\r\n    return Math.round(value * 100 * 10 ** maxDigits) / 10 ** maxDigits\r\n  }\r\n\r\n  render() {\r\n    return <div id={this.props.id} style={{ width: '100%' }} />\r\n  }\r\n}\r\n\r\nexport default GaugeChart\r\n\r\nGaugeChart.defaultProps = {\r\n  marginInPercent: 0.05,\r\n  cornerRadius: 6,\r\n  nrOfLevels: 3,\r\n  percent: 0.4,\r\n  arcPadding: 0.05, //The padding between arcs, in rad\r\n  arcWidth: 0.2, //The width of the arc given in percent of the radius\r\n  colors: ['#00FF00', '#FF0000'], //Default defined colors\r\n  textColor: '#fff',\r\n  needleColor: \"#464A4F\",\r\n  needleBaseColor: \"#464A4F\",\r\n  hideText: false,\r\n  animate: true\r\n}\r\n\r\nGaugeChart.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  marginInPercent: PropTypes.number,\r\n  cornerRadius: PropTypes.number,\r\n  nrOfLevels: PropTypes.number,\r\n  percent: PropTypes.number,\r\n  arcPadding: PropTypes.number,\r\n  arcWidth: PropTypes.number,\r\n  arcsLength: PropTypes.array,\r\n  colors: PropTypes.array,\r\n  textColor: PropTypes.string,\r\n  needleColor: PropTypes.string,\r\n  needleBaseColor: PropTypes.string,\r\n  hideText: PropTypes.bool,\r\n  animate: PropTypes.bool\r\n}\r\n","import GaugeChart from './GaugeChart';\r\nexport default GaugeChart;","import React, { Component } from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\nimport './App.css'\r\nimport GaugeChart from './lib'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Container>\r\n          <Row>\r\n            <Col xs={12} lg={{ offset: 2, span: 8 }}>\r\n              <h1>React Gauge Chart Demo</h1>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col xs={12} lg={6}>\r\n              <h6>GaugeChart with default props</h6>\r\n              <GaugeChart id=\"gauge-chart1\" />\r\n            </Col>\r\n            <Col xs={12} lg={6}>\r\n              <h6>GaugeChart with 20 levels</h6>\r\n              <GaugeChart id=\"gauge-chart2\" nrOfLevels={20} percent={0.86} needleColor=\"#345243\" />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col xs={12} lg={6}>\r\n              <h6>GaugeChart with custom colors</h6>\r\n              <GaugeChart\r\n                id=\"gauge-chart3\"\r\n                nrOfLevels={30}\r\n                colors={['#FF5F6D', '#FFC371']}\r\n                arcWidth={0.3}\r\n                percent={0.37}\r\n              />\r\n            </Col>\r\n            <Col xs={12} lg={6}>\r\n              <h6>GaugeChart with larger padding between elements</h6>\r\n              <GaugeChart id=\"gauge-chart4\" nrOfLevels={10} arcPadding={0.1} cornerRadius={3} percent={0.6} />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col xs={12} lg={6}>\r\n              <h6>GaugeChart with custom arcs width</h6>\r\n              <GaugeChart\r\n                id=\"gauge-chart5\"\r\n                nrOfLevels={420}\r\n                arcsLength={[0.3, 0.5, 0.2]}\r\n                colors={['#5BE12C', '#F5CD19', '#EA4228']}\r\n                percent={0.37}\r\n                arcPadding={0.02}\r\n              />\r\n            </Col>\r\n            <Col xs={12} lg={6}>\r\n              <h6>GaugeChart without animation</h6>\r\n              <GaugeChart \r\n                id=\"gauge-chart6\" \r\n                animate={false} \r\n                nrOfLevels={15} \r\n                percent={0.56} \r\n                needleColor=\"#345243\" \r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}